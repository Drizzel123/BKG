package com.group.proseminar.knowledge_graph.reader;

import java.util.LinkedList;
import java.util.concurrent.Semaphore;

/**
 * Main controller. An object from this class is generated by {@link App} at the beginning and it 
 * keeps track of the main sequence of the program.
 * 
 * @author Sibar Soumi
 *
 */

public class Controller {
	private Semaphore start_view_wait = new Semaphore(0);
	private Semaphore pool_limiter = new Semaphore(10);
	private String ontology;
	private LinkedList<ArticleHolder> pool = new LinkedList<ArticleHolder>();
	/**
	 * Once created, {@link StartView} is generated and showed to ask the user for an ontology.
	 * Once an ontology is entered and registered, a signal is triggered using the semaphore {@link start_view_wait} and therefore {@link DataFetcher} is created and started.
	 */
	public Controller() {
		StartView start_view = new StartView(start_view_wait, this);
		try {
			start_view_wait.acquire();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		new DataFetcher(ontology, this, pool_limiter).start();

	}
	/**
	 * Called by {@link StartView} to set the ontology that the user entered.
	 * @param text
	 */
	public void setOdb(String text) {
		ontology = text;
	}
	/**
	 * Called by {@link DataFetcher} to register the threads (the article holders) on the pool.
	 * @param ah The ArticleHolder to be registered on the pool.
	 */
	public void addHolderToThePool(ArticleHolder ah) {
		pool.add(ah);
	}
	/**
	 * Called by {@link ArticleHolder} to delete himself from the pool once the all processing steps of the article are finished.
	 * @param ah The ArticleHolder to be deleted from the pool.
	 */
	public void deleteHolderFromThePool(ArticleHolder ah) {
		pool.remove(ah);
		pool_limiter.release();
	}

}
